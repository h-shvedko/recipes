window.onload = function () {
    /**
     *
     * @type {HTMLElement}
     */
    let formElement = document.getElementById('form');

    /**
     *
     * @type {HTMLElement}
     */
    let menuCalculate = document.getElementById('menu-calculate');

    /**
     *
     * @type {Element}
     */
    let modal = document.querySelector('.modal');

    /**
     *
     * @type {Element}
     */
    let lightbox = document.querySelector('.lightbox');

    /**
     *
     * @type {Element}
     */
    let closeModalButton = document.querySelector('.hide-modal');

    /**
     *
     * @type {HTMLElement}
     */
    let allergieJa = document.getElementById('allergie-ja');

    /**
     *
     * @type {HTMLElement}
     */
    let allergieNein = document.getElementById('allergie-nein');

    /**
     *
     * @type {HTMLElement}
     */
    let typeResultsWrapper = document.getElementById('type-results');

    /**
     *
     * @type {HTMLElement}
     */
    let allergieResultsWrapper = document.getElementById('allergie-results');

    /**
     *
     * @type {number}
     */
    let kalories = 0;

    /**
     *
     * @type {number}
     */
    let fruestuckKalorien = 0;

    /**
     *
     * @type {number}
     */
    let mittagessenKalorien = 0;

    /**
     *
     * @type {number}
     */
    let abendessenKalorien = 0;

    /**
     *
     */
    let recipes;

    /**
     *
     * @type {Array}
     */
    let usedNumbers = [];

    /**
     *
     */
    let menuItems;

    /**
     *
     * @type {HTMLElement}
     */
    let listGenerate = document.getElementById('list-generation');

    /**
     *
     * @type {HTMLElement}
     */
    let menuPrint = document.getElementById('menu-print');

    /**
     *
     * @type {HTMLElement}
     */
    let menuSave = document.getElementById('menu-save');

    /**
     *
     * @type {HTMLElement}
     */
    let listePrint = document.getElementById('liste-print');

    /**
     *
     * @type {Array}
     */
    let menuObject = [];

    /**
     *
     * @type {number}
     */
    const MIN_GERICHT_WEIGHT = 200;

    /**
     *
     * @type {number}
     */
    const MAX_GERICHT_WEIGHT = 1500;

    /**
     *
     * @type {string}
     */
    const ADD_TO_MENU_LABEL = 'HinfÃ¼gen zu Wunschlist';

    const REMOVE_FROM_MENU_LABEL = 'aus der Wunschliste entfernen';

    /**
     *
     * @type {boolean}
     */
    let isMenuLoadedFromLocalStorage = false;

    /**
     *
     * @type {{}}
     */
    let allergieValues = {
        'gluten': 1,
        'laktose': 2,
        'nuesse': 3,
        'pilze': 4,
        'zitrusfruechte': 5
    }

    /**
     *
     * @type {{normal: number, vegitarien: number, vegan: number}}
     */
    let gerichteType = {
        'normal': 1,
        'vegitarien': 2,
        'vegan': 3
    };

    /**
     *
     * @type {boolean}
     */
    window.allergieJa = false;

    /**
     *
     * @type {boolean}
     */
    window.allergieNein = true;

    /**
     *
     * @type {boolean}
     */
    window.addButtonsEventAttached = false;

    /**
     *
     * @type {boolean}
     */
    window.addIconsEventAttached = false;

    /**
     *
     * @type {boolean}
     */
    window.reloadIconsEventAttached = false;

let formErrors = [];

/**
 *
 * @type {string}
 */
const WEIBLICH_GESCHLECHT = 'weiblich';

/**
 *
 * @type {string}
 */
const MAENLICH_GESCHLECHT = 'maennlich';

/**
 *
 * @type {number}
 */
const ERGEBNIS_ZUNEHMEN = 1;

/**
 *
 * @type {number}
 */
const ERGEBNIS_ABNEHMEN = 2;

/**
 *
 * @type {number}
 */
const ERGEBNIS_BLEIBEN = 3;

/**
 *
 * @type {string}
 */
const AKTIVITAT_MANGEL = '1';

/**
 *
 * @type {string}
 */
const AKTIVITAT_MASSIGE = '2';

/**
 *
 * @type {string}
 */
const AKTIVITAT_MITTLERE = '3';

/**
 *
 * @type {string}
 */
const AKTIVITAT_SEHR_AKTIVE = '4';

/**
 *
 * @type {string}
 */
const AKTIVITAT_SPORTLER = '5';

/**
 *
 * @type {number}
 */
const FRUESTUEK_PROZENT = 30;

/**
 *
 * @type {number}
 */
const MITTAGESSEN_PROZENT = 50;

/**
 *
 * @type {number}
 */
const ABENDESSEN_PROZENT = 20;

/**
 *
 * @type {number}
 */
const MENU_300 = 300;

/**
 *
 * @type {number}
 */
const MENU_500 = 500;

/**
 *
 * @type {number}
 */
const MENU_800 = 800;

/**
 *
 * @type {string}
 */
const FRUESTUEK_NAME = 'fruestuek';

/**
 *
 * @type {string}
 */
const MITTAGESSEN_NAME = 'mittag';

/**
 *
 * @type {string}
 */
const ABENDESSEN_NAME = 'abend';

if (formElement) {
    /**
     *
     */
    formElement.addEventListener('reset', function (event) {
        let ergebnis = document.getElementsByClassName('ergebnis-container')[0];
        let speiseplanAbgrage = document.getElementsByClassName('speiseplan-anfrage')[0];
        let speiseplan = document.getElementsByClassName('menu-container')[0];
        let listErgebnis = document.querySelector('.list-of-products');

        if (ergebnis) {
            ergebnis.style.display = 'none';
            speiseplanAbgrage.style.display = 'none';
            speiseplan.style.display = 'none';
            listErgebnis.style.display = 'none';
        }
    });

    /**
     *
     */
    formElement.addEventListener('submit', function (event) {
        event.preventDefault();
        event.stopPropagation();

        let formValid = validateForm(formElement);
        let formData = prepareFormData(event.target.elements);

        if (formValid) {
            kalories = calculateCalories(formData);
        }

        let ergebnissKalorien = document.querySelector('.ergebnis-container') || null;
        let speiseplanAnfrage = document.querySelector('.speiseplan-anfrage') || null;

        if (ergebnissKalorien !== null) {
            let name = formData['vorname'];

            if (name.length > 0) {
                name = name + ', ';
            }

            if (kalories < 1200) {
                ergebnissKalorien.getElementsByClassName('result-text')[0].innerHTML = name + 'Sie sollen mindestens <strong>1200</strong> Kalorien pro Tag essen! Aber villeicht haben Sie etwas falsch eingegeben.'
            } else {
                ergebnissKalorien.getElementsByClassName('result-text')[0].innerHTML = name + 'Sie sollen maximal <strong>' + kalories + '</strong> Kalorien pro Tag essen!'
            }

            ergebnissKalorien.style.display = 'block';
            speiseplanAnfrage.style.display = 'block';

            let menuErgebniss = document.querySelector('.menu-container') || null;
            if (menuErgebniss !== null) {
                menuErgebniss.style.display = 'none';
            }

            let einkaufsList = document.querySelector('.list-of-products') || null;
            if (einkaufsList !== null) {
                einkaufsList.style.display = 'none';
            }
        }

        return false;
    });
}

/**
 * Form validation method
 * @param form - form javascript object
 * @returns {boolean}
 */
validateForm = function (form) {
    let res = true;

    return res;
};

/**
 *
 * @param aktivitaet
 * @returns {number}
 */
getAktivitaet = function (aktivitaet) {

    switch (aktivitaet) {
        case AKTIVITAT_MANGEL:
            return 1.2;
        case AKTIVITAT_MASSIGE:
            return 1.375;
        case AKTIVITAT_MITTLERE:
            return 1.55;
        case AKTIVITAT_SEHR_AKTIVE:
            return 1.725;
        case AKTIVITAT_SPORTLER:
            return 1.9;
    }
};

/**
 * Calculation of calories
 * @param formData
 * @returns {number}
 */
calculateCalories = function (formData) {
    let res = 0,
        bmr = 0,
        a, b, c, d, amr;
    let geschlecht = formData['geschlecht'] || null;
    let gewicht = formData['gewicht'] || 0;
    let alter = formData['alter'] || 0;
    let grosse = formData['grosse'] || 0;
    let aktivitaet = formData['aktivitaet'] || 0;
    let ergebnis = parseInt(formData['ergebnis']) || 0;

    if (geschlecht !== null) {
        if (geschlecht === WEIBLICH_GESCHLECHT) {
            a = 447.593;
            b = 9.247;
            c = 3.098;
            d = 4.33;
        } else {
            a = 88.362;
            b = 13.397;
            c = 4.799;
            d = 5.677;
        }

        let koeff = 1;
        switch (ergebnis) {
            case ERGEBNIS_ZUNEHMEN:
                koeff = 1.2;
                break;
            case ERGEBNIS_ABNEHMEN:
                koeff = 0.8;
                break;
        }

        bmr = (a + b * gewicht + c * grosse - d * alter) * koeff;
        amr = getAktivitaet(aktivitaet);

        res = Math.round(bmr * amr);
    }

    return res;
};

/**
 * Preparing data drom form
 * @param formElements
 * @returns {Array}
 */
prepareFormData = function (formElements) {
    let data = [];

    if (formElements) {
        let dataName, dataValue;

        for (let i = 0; i < formElements.length; i++) {
            if (formElements[i].hasAttribute('name')) {
                if (formElements[i].hasAttribute('type') && formElements[i].getAttribute('type') === 'radio'
                    && formElements[i].checked) {
                    dataName = formElements[i].getAttribute('name');
                    dataValue = formElements[i].value;
                } else if (formElements[i].hasAttribute('type') && formElements[i].getAttribute('type') !== 'radio' && formElements[i].tagName !== 'select') {
                    dataName = formElements[i].getAttribute('name');
                    dataValue = formElements[i].value;
                } else if (formElements[i].tagName.toLocaleLowerCase() === 'select') {
                    dataValue = formElements[i].options[formElements[i].selectedIndex].value;
                    dataName = formElements[i].getAttribute('name');
                }
                data[dataName] = dataValue;
            }
        }
    }

    return data;
};

/**
 * Get content from recipes files
 */
loadGerichten = function () {
    let xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
        if (this.readyState === 4 && this.status === 200) {
            recipes = JSON.parse(this.responseText);
            recipes = filterWithType(recipes);
            if(window.allergieJa){
                recipes = filterWithAllergie(recipes);
            }

            if(recipes.dishes.length < 3){
                alert('Wir haben so wenig Rezepten mit Ihren WÃ¼hcnen. Bitte wÃ¤hlen andere Filter Optionen.');
                recipes = [];
                window.hasRecipes = false;
            } else {
                window.hasRecipes = true;
            }
        }
    };
    xhttp.open("GET", "./recipes.json", false);
    xhttp.send();
};

/**
 * Generates menu table
 */
generateMenu = function (isSaved) {
    fruestuckKalorien = Math.floor(kalories * FRUESTUEK_PROZENT / 100);
    mittagessenKalorien = Math.floor(kalories * MITTAGESSEN_PROZENT / 100);
    abendessenKalorien = Math.floor(kalories * ABENDESSEN_PROZENT / 100);

    let ergebnisContainer = document.getElementsByClassName('ergebnis-container')[0];
    let menuAnfrage = document.getElementsByClassName('speiseplan-anfrage')[0];

    if (ergebnisContainer) {
        let tage = menuAnfrage.querySelectorAll('.tage');
        let nummerTage = 3;

        if (tage) {
            tage.forEach(function (elem) {
                if (elem.checked) {
                    nummerTage = elem.value
                }
            });
        }
        let menuObject = [];

        if (!isSaved) {
            menuObject = getMenuObject(nummerTage);
        } else {
            menuObject = getMenuObjectNotRandom(nummerTage);
        }

        let htmlElement = generateHtmlForMenu(menuObject);
        let htmlElementForPrint = generateHtmlForPrintMenu(menuObject);
        let tableMenu = document.getElementsByClassName('menu-container')[0];

        if (tableMenu) {
            tableMenu.style.display = 'block';
            let ergebnis = tableMenu.querySelector('.result-text.display');
            if (ergebnis) {
                ergebnis.innerHTML = htmlElement.outerHTML;
                ergebnis.scrollIntoView({block: "start", behavior: "smooth"});
                addEventListenrsForMenus();
            }

            let ergebnisPrint = tableMenu.querySelector('.result-text.print');
            if (ergebnisPrint) {
                ergebnisPrint.innerHTML = htmlElementForPrint.outerHTML;
            }

            attachEventsToGerichtElements();
            attachEventListenerToReloadGerichtIcon();
        }
    }
};

/**
 *
 * @param recipeObject
 * @returns {*}
 */
getGerichteNumber = function (recipeObject) {
    let nummerVonGerichte = recipeObject.dishes.length - 1;
    return getRandomGerichtNummer(0, nummerVonGerichte);
}

/**
 *
 * @returns {*}
 * @param recipeObjectToCheck
 */
filterWithType = function (recipeObjectToCheck) {
    let newRecipeObject = [];
    let recipeObjectResult = [];
    let recipeObject = recipeObjectToCheck.dishes;

    if (typeof recipeObject !== 'undefined' && recipeObject.length > 0) {
        for (let i = 0; i < recipeObject.length; i++) {
            if (inTypeArray(recipeObject[i].type)) {
                newRecipeObject.push(recipeObject[i]);
            }
        }

        recipeObjectResult.dishes = newRecipeObject;
    } else {
        recipeObjectResult.dishes = [];
    }

    return recipeObjectResult;
};

/**
 *
 * @param element
 * @returns {boolean}
 */
inTypeArray = function(element){
    let typeResults = typeResultsWrapper.querySelectorAll('input:checked');
    if(typeResults.length > 0){
        let selectedValues = [];
        for (let i = 0; i < typeResults.length; i++) {
            selectedValues.push(typeResults[i].value);
        }

        if(selectedValues.length === 0){
            return true;
        }

        return selectedValues.indexOf(element) !== -1;
    }

    return true;
};

/**
 *
 * @returns {*}
 * @param recipeObjectToCheck
 */
filterWithAllergie = function (recipeObjectToCheck) {
    let newRecipeObject = [];
    let recipeObjectResult = [];
    let recipeObject = recipeObjectToCheck.dishes;

    if (typeof recipeObject !== 'undefined' && recipeObject.length > 0) {
        for (let i = 0; i < recipeObject.length; i++) {
            if (!inAllergieArray(recipeObject[i].allergic)) {
                newRecipeObject.push(recipeObject[i]);
            }
        }

        recipeObjectResult.dishes = newRecipeObject;
    } else {
        recipeObjectResult.dishes = [];
    }

    return recipeObjectResult;
};

/**
 *
 * @returns {boolean}
 * @param elements
 */
inAllergieArray = function(elements){
    let allergieResults = allergieResultsWrapper.querySelectorAll('input:checked');
    if(allergieResults.length > 0){
        let selectedValues = [];
        for (let i = 0; i < allergieResults.length; i++) {
            selectedValues.push(allergieResults[i].value);
        }

        if(selectedValues.length === 0){
            return false;
        }

        if(elements.length > 0){
            for (let j = 0; j < elements.length; j++) {
                if(selectedValues.indexOf(elements[j]) !== -1){
                    return true;
                }
            }
        }
    }

    return false;
};

/**
 *
 * @returns {[]}
 */
getGerichtItem = function () {
    let tmpTag = [];
    for (let j = 1; j <= 9; j++) {
        let recipeObject = recipes;

        if(recipeObject.dishes.length > 0){
            let gerichteNummer = getGerichteNumber(recipeObject);

            let type = FRUESTUEK_NAME;
            if (j > 3 && j <= 6) {
                type = MITTAGESSEN_NAME;
            } else if (j > 6) {
                type = ABENDESSEN_NAME;
            }

            let count = 0;

            while (getGerichteWeight(recipeObject.dishes[gerichteNummer], type) > MAX_GERICHT_WEIGHT
            || getGerichteWeight(recipeObject.dishes[gerichteNummer], type) < MIN_GERICHT_WEIGHT) {
                gerichteNummer = getGerichteNumber(recipeObject);
                count++;

                if(count > 10){
                    break;
                }
            }

            tmpTag[j] = recipeObject.dishes[gerichteNummer];
        }
    }
    return tmpTag;
}

/**
 *
 * @param nummerTage
 */
getMenuObject = function (nummerTage) {
    let res = [];

    let usedNumbers;
    for (let i = 1; i <= nummerTage; i++) {
        let tmpRes = [];
        let tmpTag = getGerichtItem();

        usedNumbers = [];
        tmpRes['fruestuek1'] = tmpTag[1];
        tmpRes['fruestuek2'] = tmpTag[2];
        tmpRes['fruestuek3'] = tmpTag[3];
        tmpRes['mittag1'] = tmpTag[4];
        tmpRes['mittag2'] = tmpTag[5];
        tmpRes['mittag3'] = tmpTag[6];
        tmpRes['abend1'] = tmpTag[7];
        tmpRes['abend2'] = tmpTag[8];
        tmpRes['abend3'] = tmpTag[9];

        res.push(tmpRes);
    }

    menuObject = res;

    return res;
};

/**
 *
 * @param nummerTage
 * @param type
 */
window.getMenuObjectByTagAndType = function (nummerTage, type) {
    let res = [];

    let usedNumbers;
    for (let i = 1; i <= nummerTage; i++) {
        let tmpRes = [];
        let tmpTag = getGerichtItem();

        usedNumbers = [];
        tmpRes[type + '1'] = tmpTag[1];
        tmpRes[type + '2'] = tmpTag[2];
        tmpRes[type + '3'] = tmpTag[3];

        res.push(tmpRes);
    }

    return res;
};

/**
 *
 * @returns {*[]}
 */
getMenuObjectNotRandom = function () {
    let tmpRes = [];
    let tmpTag = [];
    let recipeObject = recipes;
    let nummerTage = 7; //use max number of days

    for (let dish of recipeObject.dishes) {
        tmpRes[dish.type + dish.day] = dish;
    }

    for (let i = 1; i <= nummerTage; i++) {
        tmpTag[i] = [];
        for (let tmpResIndex in tmpRes) {
            if(tmpRes.hasOwnProperty(tmpResIndex)){
                if (tmpResIndex.indexOf(i.toString()) !== -1) {
                    tmpTag[i][tmpRes[tmpResIndex].type + '1'] = tmpRes[tmpResIndex];
                }
            }
        }
    }

    tmpTag = tmpTag.filter(function () {
        return true;
    });

    menuObject = tmpTag;

    return tmpTag;
};

/**
 *
 * @param min
 * @param max
 * @returns {*}
 */
getRandomNummer = function (min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
};

/**
 *
 * @param min
 * @param max
 * @returns {*}
 */
getRandomGerichtNummer = function (min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    let nummer = Math.floor(Math.random() * (max - min + 1)) + min;

    //TODO increase number of dishes and activate this again
    if (usedNumbers.includes(nummer)) {
        try{
            nummer = getRandomGerichtNummer(min, max);
            usedNumbers.push(nummer);
        } catch (e) {
            console.log(e);
        }
    }

    return nummer;
};

if (menuCalculate) {
    /**
     *
     */
    menuCalculate.addEventListener('click', function (event) {
        event.preventDefault();
        event.stopPropagation();

        let ifWeHaveStoredMenu = getStoredIntoLocalStorage();
        let savedMenu = getAllFromLocalStorage();

        if (ifWeHaveStoredMenu && ifWeHaveStoredMenu === '1' && savedMenu && savedMenu.length > 0) {
            let einkaufsList = document.querySelector('.list-of-products') || null;
            if (einkaufsList !== null) {
                einkaufsList.style.display = 'none';
            }

            if (showinteractivePopup('Sie haben schon ein Speiseplan gespeichern. MÃ¶chten Sie das aufladen?')) {
                recipes = {dishes: savedMenu};
                generateMenu(true);
                isMenuLoadedFromLocalStorage = true;
            } else {
                isMenuLoadedFromLocalStorage = false;
                clearLocalStorage();
                loadGerichten();

                if(window.hasRecipes){
                    generateMenu(false);
                }
            }

        } else {
            let einkaufsList = document.querySelector('.list-of-products') || null;
            if (einkaufsList !== null) {
                einkaufsList.style.display = 'none';
            }
            clearLocalStorage();

            loadGerichten();

            generateMenu(false);
        }
        return false;
    });
}

/**
 *
 * @param gerichtObject - ÑÐµÑÐµÐ¿Ñ Ð¾Ð´Ð½Ð¾Ð³Ð¾ Ð±Ð»ÑÐ´Ð° Ð±ÐµÑÐµÑÑÑ Ð¸Ð· json
 * @param type
 * @returns {number}
 */
window.getGerichteWeight = function (gerichtObject, type) {
    let weight = 0;

    let frueschtuek = kalories * FRUESTUEK_PROZENT / 100;
    let mittag = kalories * MITTAGESSEN_PROZENT / 100;
    let abend = kalories * ABENDESSEN_PROZENT / 100;

    let kaloriesProPorzionGramm = gerichtObject.calories;

    let koefficientFruestuek = frueschtuek / kaloriesProPorzionGramm;
    let koefficientMittag = mittag / kaloriesProPorzionGramm;
    let koefficientAbend = abend / kaloriesProPorzionGramm;

    switch (type) {
        case FRUESTUEK_NAME:
            weight = Math.round(gerichtObject.weight * koefficientFruestuek);
            break;
        case ABENDESSEN_NAME:
            weight = Math.round(gerichtObject.weight * koefficientAbend);
            break;
        case MITTAGESSEN_NAME:
            weight = Math.round(gerichtObject.weight * koefficientMittag);
            break;
    }

    return weight;
};

if (allergieJa) {
    allergieJa.addEventListener('click', function (event) {
        window.allergieJa = true;
        window.allergieNein = false;
        let allergieWrapper = document.querySelector('.filters-wrapper.allergie');
        if (allergieWrapper) {
            allergieWrapper.classList.remove('d-none');
        }
    });
}

if (allergieNein) {
    allergieNein.addEventListener('click', function (event) {
        window.allergieJa = false;
        window.allergieNein = true;
        let allergieWrapper = document.querySelector('.filters-wrapper.allergie');
        if (allergieWrapper) {
            allergieWrapper.classList.add('d-none');
        }
    });
}

/**
 *
 * @type {string}
 */
const STORAGE_NAME = 'gerichte';

/**
 *
 * @type {string}
 */
const STORAGE_NAME_STORE = 'store';

/**
 *
 * @param gerichtValue
 */
window.addGerichtToLocalStorage = function (gerichtValue) {

    let currentStorage = JSON.parse(localStorage.getItem(STORAGE_NAME));

    if (currentStorage === null) {
        currentStorage = [];
    }

    if (gerichtNotInStorage(gerichtValue)) {
        currentStorage.push(gerichtValue);
    } else {
        alert('Dies Gericht ist schon im Ihren Menu');
    }

    localStorage.setItem(STORAGE_NAME, JSON.stringify(currentStorage));
};


/**
 *
 */
window.addStoreIntoLocalStorage = function () {
    return new Promise((resolve) => {
        localStorage.setItem(STORAGE_NAME_STORE, JSON.stringify(1));
        resolve();
    });
};

/**
 *
 * @returns {string}
 */
window.getStoredIntoLocalStorage = function () {
    return localStorage.getItem(STORAGE_NAME_STORE);
};

/**
 *
 */
window.clearLocalStorage = function () {
    localStorage.clear();
};

/**
 *
 * @returns {boolean}
 * @param gerichtValue
 */
window.gerichtNotInStorage = (gerichtValue) => {
    return findItemInLocalStorage(gerichtValue) === null;
};

/**
 *
 * @param gerichtValue
 */
window.removeGerichtToLocalStorage = function (gerichtValue) {
    let gerichtFromStorageInfo = findItemInLocalStorage(gerichtValue);

    if (gerichtFromStorageInfo !== null) {
        let gerichteFromStorage = JSON.parse(localStorage.getItem(STORAGE_NAME));
        let newGerichteValueForStorage = [];
        for (let i = 0; i < gerichteFromStorage.length; i++) {

            if (gerichteFromStorage[i].name === gerichtValue.name
                && gerichteFromStorage[i].day === gerichtValue.day
                && gerichteFromStorage[i].type === gerichtValue.type) {
                continue;
            } else {
                newGerichteValueForStorage.push(gerichteFromStorage[i]);
            }
        }

        clearLocalStorage();
        localStorage.setItem(STORAGE_NAME, JSON.stringify(newGerichteValueForStorage));
    }
};

/**
 *
 * @returns {null|*}
 * @param gerichtValue
 */
window.findItemInLocalStorage = function (gerichtValue) {
    let lengthOfLocalStorage = localStorage.length;

    if (lengthOfLocalStorage > 0) {
        let gerichteFromStorage = JSON.parse(localStorage.getItem(STORAGE_NAME));

        for (let i = 0; i < gerichteFromStorage.length; i++) {

            if (gerichteFromStorage[i].name === gerichtValue.name
                && gerichteFromStorage[i].day === gerichtValue.day
                && gerichteFromStorage[i].type === gerichtValue.type) {
                return gerichteFromStorage[i];
            }
        }

    }

    return null;
};

/**
 *
 * @returns {[]}
 */
window.getAllFromLocalStorage = function () {
    let lengthOfLocalStorage = localStorage.length;
    let result = [];
    if (lengthOfLocalStorage > 0) {
        result = JSON.parse(localStorage.getItem(STORAGE_NAME));

    }

    return result;
};

window.hashCode = function(s){
    let res = s.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);

    if(res < 0){
        res = res * (-1);
    }

    return res;
};


/**
 * Open modal window
 */
window.openModal = function () {
    if (modal !== null) {
        modal.style.display = 'block';
    }
};

/**
 * Close modal window
 */
window.closeModal = function () {
    if (modal !== null) {
        modal.style.display = 'none';
    }
};

/**
 * Show lightbox
 */
window.showLightbox = function () {
    if (lightbox !== null) {
        lightbox.style.display = 'block';
    }
};

/**
 * Hide lightbox
 */
window.hideLightbox = function () {
    if (lightbox !== null) {
        lightbox.style.display = 'none';
    }
};

if (lightbox !== null) {
    /**
     *
     */
    lightbox.addEventListener('click', function (event) {
       closeModal();
       hideLightbox();
    });
}


if (closeModalButton !== null) {
    /**
     *
     */
    closeModalButton.addEventListener('click', function (event) {
        closeModal();
        hideLightbox();
    });
}

/**
 *
 * @param text
 */
window.showWarningPopup = (text) => {
    alert(text);
};

/**
 *
 * @param text
 */
window.showinteractivePopup = (text) => {
    return confirm(text);
};

/**
 *
 * @param photoId
 * @returns {HTMLElement}
 */
window.createImg = function (photoId) {
    let image = document.createElement('img');
    image.setAttribute('src', './img/image' + photoId + '.jpg');
    image.setAttribute('alt', 'image' + photoId);
    image.classList.add('img-fluid');
    return image;
};

/**
 *
 * @returns {HTMLElement}
 * @param text
 */
window.createHeadline = function (text) {
    let headline = document.createElement('h4');
    headline.innerHTML = text;
    return headline;
};

/**
 *
 * @returns {HTMLElement}
 * @param text
 */
window.createHeadlineH3 = function (text) {
    let headline = document.createElement('h3');
    headline.innerHTML = text;
    return headline;
};

/**
 *
 * @returns {HTMLElement}
 * @param hmtl
 */
window.createBlock = function (hmtl) {
    let blockElement = document.createElement('div');
    blockElement.innerHTML = hmtl;
    return blockElement;
};

/**
 *
 * @returns {HTMLElement}
 * @param text
 */
window.createHeadlineH2 = function (text) {
    let headline = document.createElement('h2');
    let span = document.createElement('span');
    span.innerHTML = text;
    headline.appendChild(span);
    headline.classList.add('headline');
    headline.classList.add('headline--dotted');
    return headline;
};

/**
 *
 * @returns {HTMLElement}
 * @param text
 */
window.createText = function (text) {
    let textTag = document.createElement('p');
    textTag.innerHTML = text;
    return textTag;
};

/**
 *
 * @param object - ÑÐµÑÐµÐ¿Ñ Ð¾Ð´Ð½Ð¾Ð³Ð¾ Ð±Ð»ÑÐ´Ð° Ð±ÐµÑÐµÑÑÑ Ð¸Ð· json
 * @param isPrint
 * @returns {HTMLElement}
 */
window.createBeschreibung = function (object, isPrint) {
    let popover = document.createElement('div');
    let popoverHeader = document.createElement('h3');
    let popoverBody = document.createElement('div');
    let ingredientElement = document.createElement('div');
    let ingredients = object.ingredients;
    let ingredientsHtml = '';
    let image = createImg(object.photoId);

    if (!isPrint) {
        popover.classList.add("popover");
        popover.classList.add("fade");
    } else {
        popover.classList.add("popover-print");
    }

    popoverHeader.classList.add('popover-header');

    popoverBody.classList.add('popover-body');

    popover.appendChild(popoverHeader);
    popover.appendChild(popoverBody);

    popoverHeader.innerText = object.name;

    ingredientElement.classList.add('mt-3');
    ingredientElement.classList.add('mb-3');
    ingredientElement.classList.add('ingredients');
    ingredientElement.classList.add('text-right');

    let weight = createText("<i class=\"fas fa-balance-scale\"></i> " + getGerichteWeight(object, FRUESTUEK_NAME) + " g");
    weight.classList.add('d-inline');
    weight.classList.add('mr-3');

    let kallorien = createText("<i class=\"fas fa-fire-alt\"></i> " + object.relative_calories + " kcal pro 100 g");
    kallorien.classList.add('d-inline');
    kallorien.classList.add('mr-3');

    let zeit = createText("<i class=\"fas fa-hourglass-start\"></i> " + object.time + " min");
    zeit.classList.add('d-inline');
    zeit.classList.add('mr-3');

    let buttonAdd = createText("<button class='btn btn-success wunschlist-button' data-name='" + object.name + "' data-stored='0'>HinfÃ¼gen zu Wunschlist</button>");
    buttonAdd.classList.add('d-inline');
    buttonAdd.classList.add('mr-3');

    let infoElement = createBlock(weight.outerHTML + kallorien.outerHTML + zeit.outerHTML + buttonAdd.outerHTML);
    infoElement.classList.add('mt-3');
    infoElement.classList.add('mb-3');
    infoElement.classList.add('text-center');

    let zutatenElement = createText("Zutaten");
    zutatenElement.classList.add('popover-headline');

    ingredientsHtml += zutatenElement.outerHTML;

    if (ingredients.length > 0) {
        for (let i = 0; i < ingredients.length; i++) {
            let measure = '';
            if (ingredients[i].measure !== 'n/a') {
                measure = ingredients[i].measure;
            }

            let quantity = '';
            if (ingredients[i].quantity !== 'n/a') {
                quantity = ingredients[i].quantity;
            }
            ingredientsHtml += createText(quantity + " " + measure + " " + ingredients[i].name).outerHTML;
        }
    }

    ingredientElement.innerHTML = ingredientsHtml;

    let zubereitungElement = createText("Zubereitung");
    zubereitungElement.classList.add('popover-headline');

    popoverBody.innerHTML = image.outerHTML + infoElement.outerHTML + ingredientElement.outerHTML + zubereitungElement.outerHTML + object.process;

    return popover;
};

/**
 *
 * @param object
 * @param type
 * @returns {HTMLElement}
 */
window.generateGerichtElement = function (object, type) {

    if (typeof object !== 'undefined') {
        let image1 = createImg(object.photoId);

        let headline1 = createBlock(object.name);
        headline1.classList.add('headline');

        let process = createBeschreibung(object, false);

        let reloadIcon = createText('<i class="fas fa-sync fa-2x"></i>');
        reloadIcon.setAttribute('title', 'Neues Gericht laden');
        reloadIcon.classList.add('reload-gericht');

        let addToMenuIcon = createText("<i class=\"far fa-check-circle fa-2x wunschlist-icon\" data-name='" + object.name + "' data-stored='0'></i>");
        addToMenuIcon.setAttribute('title', ADD_TO_MENU_LABEL);
        addToMenuIcon.classList.add('wunschlist-icon-wrapper');

        let div = createBlock(image1.outerHTML + reloadIcon.outerHTML + addToMenuIcon.outerHTML + headline1.outerHTML);

        div.classList.add('info-wrapper');
        div.classList.add('text-center');

        let divDisabledOverlay = createBlock('');
        divDisabledOverlay.classList.add('overlay');

        let divWrapper = createBlock(div.outerHTML + process.outerHTML + divDisabledOverlay.outerHTML);
        divWrapper.classList.add('gericht');
        divWrapper.setAttribute('data-name', object.name.replace('\"', '\''));

        return divWrapper;
    } else {
        return createBlock('');
    }

};

/**
 *
 * @param menuObject
 * @param index
 * @param type
 * @returns {HTMLElement[]}
 */
window.getGerictenByType = function (menuObject, index, type) {

    let gerichtTmpA, gerichtTmpB, gerichtTmpC;

    switch (type) {
        case FRUESTUEK_NAME:
            gerichtTmpA = generateGerichtElement(menuObject[index].fruestuek1, type);
            gerichtTmpA.setAttribute('data-day', (index + 1).toString());
            gerichtTmpA.setAttribute('data-type', type);

            gerichtTmpB = generateGerichtElement(menuObject[index].fruestuek2, type);
            gerichtTmpB.setAttribute('data-day', (index + 1).toString());
            gerichtTmpB.setAttribute('data-type', type);

            gerichtTmpC = generateGerichtElement(menuObject[index].fruestuek3, type);
            gerichtTmpC.setAttribute('data-day', (index + 1).toString());
            gerichtTmpC.setAttribute('data-type', type);
            break;
        case MITTAGESSEN_NAME:
            gerichtTmpA = generateGerichtElement(menuObject[index].mittag1, type);
            gerichtTmpA.setAttribute('data-day', (index + 1).toString());
            gerichtTmpA.setAttribute('data-type', type);

            gerichtTmpB = generateGerichtElement(menuObject[index].mittag2, type);
            gerichtTmpB.setAttribute('data-day', (index + 1).toString());
            gerichtTmpB.setAttribute('data-type', type);

            gerichtTmpC = generateGerichtElement(menuObject[index].mittag3, type);
            gerichtTmpC.setAttribute('data-day', (index + 1).toString());
            gerichtTmpC.setAttribute('data-type', type);
            break;
        case ABENDESSEN_NAME:
            gerichtTmpA = generateGerichtElement(menuObject[index].abend1, type);
            gerichtTmpA.setAttribute('data-day', (index + 1).toString());
            gerichtTmpA.setAttribute('data-type', type);

            gerichtTmpB = generateGerichtElement(menuObject[index].abend2, type);
            gerichtTmpB.setAttribute('data-day', (index + 1).toString());
            gerichtTmpB.setAttribute('data-type', type);

            gerichtTmpC = generateGerichtElement(menuObject[index].abend3, type);
            gerichtTmpC.setAttribute('data-day', (index + 1).toString());
            gerichtTmpC.setAttribute('data-type', type);
            break;
    }

    return [gerichtTmpA, gerichtTmpB, gerichtTmpC];
}

/**
 *
 * @param menuObject
 * @returns {HTMLElement}
 */
window.generateHtmlForMenu = function (menuObject) {
    let block = document.createElement('div');
    if (menuObject.length > 0) {
        for (let i = 0; i < menuObject.length; i++) {

            let blockCol = document.createElement('div');
            let table = document.createElement('table');

            block.classList.add('row');
            block.classList.add('table');

            blockCol.classList.add('col');
            blockCol.classList.add('col-12');

            table.classList.add('table');
            table.classList.add('w-100');

            block.appendChild(blockCol);
            blockCol.appendChild(table);

            let thead = document.createElement('thead');
            let tr = document.createElement('tr');

            thead.appendChild(tr);

            let theadCell1 = tr.insertCell(0);
            theadCell1.innerHTML = "";

            let theadCell2 = tr.insertCell(1);
            theadCell2.innerHTML = "FruhstÃ¼ck";
            theadCell2.classList.add('font-weight-bold');
            theadCell2.classList.add('text-center');
            theadCell2.classList.add('table-head');

            let theadCell3 = tr.insertCell(2);
            theadCell3.innerHTML = "Mittagessen";
            theadCell3.classList.add('font-weight-bold');
            theadCell3.classList.add('text-center');
            theadCell3.classList.add('table-head');

            let theadCell4 = tr.insertCell(3);
            theadCell4.innerHTML = "Abendessen";
            theadCell4.classList.add('font-weight-bold');
            theadCell4.classList.add('text-center');
            theadCell4.classList.add('table-head');

            table.appendChild(thead);

            let tbody = document.createElement('tbody');

            let trBody;
            let tag = i + 1;

            trBody = document.createElement('tr');
            trBody.classList.add('day-' + tag);

            let cell0 = trBody.insertCell(0);
            let cell1 = trBody.insertCell(1);
            let cell2 = trBody.insertCell(2);
            let cell3 = trBody.insertCell(3);

            let gerichts = getGerictenByType(menuObject, i, FRUESTUEK_NAME);
            let gericht1 = gerichts[0];
            let gericht2 = gerichts[1];
            let gericht3 = gerichts[2];

            gerichts = getGerictenByType(menuObject, i, MITTAGESSEN_NAME);
            let gericht4 = gerichts[0];
            let gericht5 = gerichts[1];
            let gericht6 = gerichts[2];

            gerichts = getGerictenByType(menuObject, i, ABENDESSEN_NAME);
            let gericht7 = gerichts[0];
            let gericht8 = gerichts[1];
            let gericht9 = gerichts[2];

            cell0.innerHTML = createHeadlineH3("Tag " + (tag)).outerHTML;
            cell0.classList.add('w-10');
            cell0.classList.add('font-weight-bold');
            cell0.classList.add('text-center');

            //TODO replace with different dishes
            cell1.innerHTML = gericht1.outerHTML + gericht2.outerHTML + gericht3.outerHTML;
            cell1.classList.add('w-30');
            cell1.classList.add('menu-item');
            cell1.classList.add('fruestuek');

            cell2.innerHTML = gericht4.outerHTML + gericht5.outerHTML + gericht6.outerHTML;
            cell2.classList.add('w-30');
            cell2.classList.add('menu-item');
            cell2.classList.add('mittag');

            cell3.innerHTML = gericht7.outerHTML + gericht8.outerHTML + gericht9.outerHTML;
            cell3.classList.add('w-30');
            cell3.classList.add('menu-item');
            cell3.classList.add('abend');

            tbody.appendChild(trBody);
            table.appendChild(tbody);
        }
    }

    return block;
};

/**
 *
 * @param zeitName
 * @returns {string}
 */
window.determineTypeofGericht = function (zeitName) {

    if (zeitName.indexOf(FRUESTUEK_NAME) !== -1) {
        return FRUESTUEK_NAME;
    }
    if (zeitName.indexOf(MITTAGESSEN_NAME) !== -1) {
        return MITTAGESSEN_NAME;
    }
    if (zeitName.indexOf(ABENDESSEN_NAME) !== -1) {
        return ABENDESSEN_NAME;
    }
};

/**
 *
 * @param zeitName
 * @returns {string}
 */
window.determineTypeofGerichtAndReturnTitle = function (zeitName) {
    let title = "FruhstÃ¼ck";

    if (zeitName.indexOf(FRUESTUEK_NAME) !== -1) {
        title = 'FruhstÃ¼ck';
    }
    if (zeitName.indexOf(MITTAGESSEN_NAME) !== -1) {
        title = 'Mittagessen';
    }
    if (zeitName.indexOf(ABENDESSEN_NAME) !== -1) {
        title = 'Abendessen';
    }

    return title;
};

/**
 *
 * @param menuObject
 * @returns {HTMLElement}
 */
window.generateHtmlForPrintMenu = function (menuObject) {
    let block = document.createElement('div');
    if (menuObject.length > 0) {

        let blockCol = document.createElement('div');
        let table = document.createElement('table');

        block.classList.add('row');
        block.classList.add('table');

        blockCol.classList.add('col');
        blockCol.classList.add('col-12');

        table.classList.add('table');
        table.classList.add('w-100');

        block.appendChild(blockCol);
        blockCol.appendChild(table);

        let tbody = document.createElement('tbody');

        let trBody;
        for (let i = 0; i < menuObject.length; i++) {
            let tag = i + 1;

            trBody = document.createElement('tr');

            let cell0 = trBody.insertCell(0);

            let innerTable = document.createElement('table');

            for (let zeitName in menuObject[i]) {
                if (menuObject[i].hasOwnProperty(zeitName)) {
                    let innerTr = document.createElement('tr');
                    innerTr.classList.add('gericht');
                    innerTr.setAttribute('data-name', menuObject[i][zeitName].name);
                    innerTr.setAttribute('data-day', tag);
                    innerTr.setAttribute('data-type', determineTypeofGericht(zeitName));

                    let innerCell0 = innerTr.insertCell(0);
                    let innerCell1 = innerTr.insertCell(1);

                    let innerImage = createImg(menuObject[i][zeitName].photoId);
                    let innerHeadline = createHeadline(menuObject[i][zeitName].name);
                    let innerWeight = createText("<i class=\"fas fa-balance-scale\"></i> " + getGerichteWeight(menuObject[i][zeitName], zeitName) + " g");
                    let innerKallorien = createText("<i class=\"fas fa-fire-alt\"></i> " + menuObject[i][zeitName].relative_calories + " kcal pro 100 g");
                    let innerZeit = createText("<i class=\"fas fa-hourglass-start\"></i> " + menuObject[i][zeitName].time + " min");
                    let innerProcess = createBeschreibung(menuObject[i][zeitName], true);

                    let title = determineTypeofGerichtAndReturnTitle(zeitName);

                    innerCell0.innerHTML = title + '<br>' + 'Tag ' + tag;
                    innerCell0.classList.add('title-print');
                    innerCell0.classList.add('font-weight-bold');
                    innerCell0.classList.add('text-center');

                    innerCell0.classList.add('w-20');
                    innerCell1.innerHTML = innerImage.outerHTML + innerHeadline.outerHTML + innerWeight.outerHTML + innerKallorien.outerHTML + innerZeit.outerHTML + innerProcess.outerHTML;
                    innerCell1.classList.add('w-80');
                    innerCell1.classList.add('menu-item');
                    innerCell1.classList.add('fruestuek');

                    //@TODO: insert page break after each menu item
                    // let pageBreakTr = document.createElement('tr')
                    // pageBreakTr.classList.add('pagebreak');
                    // pageBreakTr.insertCell(0);
                    // innerTable.appendChild(pageBreakTr);

                    innerTable.appendChild(innerTr);
                }
            }

            cell0.innerHTML = innerTable.outerHTML;


            tbody.appendChild(trBody);
        }

        table.appendChild(tbody);

    }


    return block;
};

/**
 *
 * @param event
 */
window.showBeschreibung = function (event) {

    return false;
    let element = event.currentTarget;

    let popover = element.querySelector('.popover');

    if (popover) {
        popover.classList.add('show');
    }

    return true;
};

/**
 *
 * @param event
 */
window.hideBeschreibung = function (event) {
    return false;
    let element = event.currentTarget;

    let popover = element.querySelector('.popover');

    if (popover) {
        popover.classList.remove('show');
    }

    return true;
};

/**
 *
 */
window.addEventListenrsForMenus = function () {
    let menuItems = document.querySelectorAll('.menu-item');

    if (menuItems) {
        menuItems.forEach(function (element) {
            element.addEventListener('mouseover', showBeschreibung);
            element.addEventListener('mouseleave', hideBeschreibung);
        })
    }
};

if (menuPrint) {
    menuPrint.addEventListener('click', function (event) {
        event.preventDefault();

        let disabledGerichte = document.querySelectorAll('.gericht.disabled');

        if (disabledGerichte.length > 0 || isMenuLoadedFromLocalStorage) {
            for (let i = 0; i < disabledGerichte.length; i++) {
                disabledGerichte[i].style.display = 'none';
            }

            window.print();
        } else {
            showWarningPopup('Sie haben keine Gerichte gewÃ¤hlen!');
        }
        return false;
    });

    window.onafterprint = () => {
        let disabledGerichte = document.querySelectorAll('.gericht.disabled');

        if (disabledGerichte.length > 0) {
            for (let i = 0; i < disabledGerichte.length; i++) {
                disabledGerichte[i].style.display = 'block';
            }
        }

    };
}

if (menuSave) {
    menuSave.addEventListener('click', function (event) {
        event.preventDefault();

        let gerichte = getAllFromLocalStorage();

        if (gerichte.length > 0) {
            addStoreIntoLocalStorage().then(() => {
                showWarningPopup('Das Speiseplan wurde gespeichert.');
            }).catch((err) =>  showWarningPopup('Sie haben keine Gerichte gewÃ¤hlen.'));
        } else {
            showWarningPopup('Sie haben keine Gerichte gewÃ¤hlen!');
        }
        return false;
    });
}

if (listePrint) {
    listePrint.addEventListener('click', function (event) {
        event.preventDefault();

        document.querySelector('.menu-container').style.display = 'none';
        document.querySelector('#show-menu').style.display = 'block';
        window.print();

        return false;
    });
}

let menuShow = document.getElementById('show-menu');

if (menuShow) {
    menuShow.addEventListener('click', function (event) {
        event.preventDefault();

        document.querySelector('.menu-container').style.display = 'block';
        document.querySelector('#show-menu').style.display = 'none';

        return false;
    });
}

if (listGenerate) {
    listGenerate.addEventListener('click', function (event) {
        event.preventDefault();

        let storedMenuObject = getAllFromLocalStorage();

        if (storedMenuObject && storedMenuObject.length > 0) {
            let listWrapper = document.createElement('div');
            let listWrapperCol = document.createElement('div');

            listWrapper.classList.add('row');
            listWrapperCol.classList.add('col-12');

            listWrapper.appendChild(listWrapperCol);

            let listOfProducts;
            listOfProducts = getListOfProducts(storedMenuObject);

            if (listOfProducts) {
                for (let name in listOfProducts) {
                    let quantity = listOfProducts[name]['quantity'] ? listOfProducts[name]['quantity'] : '';
                    let element = createText("<span class='custom-control-input'></span>" + name + ": " + quantity + " " + listOfProducts[name]['measure']);
                    element.classList.add('custom-control');
                    listWrapperCol.appendChild(element);
                }

                let listErgebnis = document.querySelector('.list-of-products');

                if (listErgebnis) {
                    let textContainer = listErgebnis.getElementsByClassName('result-text')[0];

                    if (textContainer) {
                        textContainer.innerHTML = listWrapper.outerHTML;
                        listErgebnis.style.display = 'block';
                        listErgebnis.scrollIntoView({block: "start", behavior: "smooth"});
                    }
                }
            }
        } else {
            showWarningPopup('Sie haben keine Gerichte gewÃ¤hlen!');
        }
        return false;
    });
}

/**
 *
 * @param object
 * @returns {Array}
 */
window.getListOfProducts = function (object) {
    let listOfProducts = [];
    if (object.length > 0) {
        for (let i = 0; i < object.length; i++) {
            if (object[i].ingredients && object[i].ingredients.length > 0) {
                let ingredients = object[i].ingredients;
                for (let j = 0; j < ingredients.length; j++) {

                    if (ingredients[j]['name'] in listOfProducts) {
                        listOfProducts[ingredients[j]['name']] = {
                            'quantity': parseInt(ingredients[j]['quantity']) + parseInt(listOfProducts[ingredients[j]['name']]['quantity']),
                            'measure': ingredients[j]['measure']
                        };
                    } else {
                        listOfProducts[ingredients[j]['name']] = {
                            'quantity': parseInt(ingredients[j]['quantity']),
                            'measure': ingredients[j]['measure']
                        };
                    }
                }
            }
        }
    }

    return listOfProducts;
};

/**
 *
 */
window.attachEventsToGerichtElements = function () {
    let gerichtElements = document.querySelectorAll('.gericht');

    if (gerichtElements.length > 0) {
        gerichtElements.forEach(function (element, key) {
            element.addEventListener('click', function (event) {
                let htmlTitle = element.querySelector('.popover-header').outerHTML;
                let htmlContent = element.querySelector('.popover-body').outerHTML;
                let popupWindow = document.querySelector('.remodal-wrapper') || null;
                let lightbox = document.querySelector('.remodal-overlay') || null;
                if (popupWindow !== null && lightbox !== null) {
                    popupWindow.querySelector('.modal-title').innerHTML = htmlTitle;
                    popupWindow.querySelector('.content').innerHTML = htmlContent;
                    popupWindow.style.display = 'block';
                    popupWindow.setAttribute('data-name', element.getAttribute('data-name'));
                    popupWindow.setAttribute('data-type', element.getAttribute('data-type'));
                    popupWindow.setAttribute('data-day', element.getAttribute('data-day'));
                    lightbox.style.display = 'block';
                    attachEventListenerToAddButton();
                }
            });
        });
        attachEventListenerToAddIcons();
    }
};

/**
 *
 * @param elementToAttach
 */
window.attachEventListenerForPopUp = function (elementToAttach) {
    elementToAttach.addEventListener('click', function (event) {
        let element = event.target;

        let parent = element.closest('.remodal') || null;

        if (parent === null || event.target.classList.contains('remodal-close')) {
            let popupWindow = document.querySelector('.remodal-wrapper') || null;
            let lightbox = document.querySelector('.remodal-overlay') || null;
            if (popupWindow !== null && lightbox !== null) {
                popupWindow.style.display = 'none';
                lightbox.style.display = 'none';
            }
        }
    });
};


let remodalWrapper = document.querySelector('.remodal-wrapper') || null;

if (remodalWrapper !== null) {
    attachEventListenerForPopUp(remodalWrapper);
}

let remodalClose = document.querySelector('.remodal-close') || null;
if (remodalClose !== null) {
    attachEventListenerForPopUp(remodalClose);
}

/**
 *
 * @param name
 * @param type
 * @param day
 * @returns {null}
 */
window.findGericht = (name, type, day) => {
    let gerichtResult = null;

    if (typeof menuObject !== 'undefined' && menuObject.length > 0) {
        if (menuObject.hasOwnProperty(day - 1)) {
            let menuObjectByDay = menuObject[day - 1];

            for (let menuObjectType in menuObjectByDay) {
                if (menuObjectType.indexOf(type) !== -1) {
                    if (menuObjectByDay.hasOwnProperty(menuObjectType) && menuObjectByDay[menuObjectType].name === name) {
                        gerichtResult = menuObjectByDay[menuObjectType];
                    }
                }
            }
        }
    }

    return gerichtResult;
};

/**
 *
 * @param name
 * @param type
 * @param day
 * @param isIconAction
 * @param element
 */
window.removeGerichtFromMenu = function (name, day, type, isIconAction, element) {
    let gericht = findGericht(name, type, day);
    let gerichtPopoverIcon = getGerichtPopoverIcon(day, type, name);
    let gerichtPopoverButton = getGerichtPopoverButton(day, type, name);

    removeGerichtToLocalStorage(gericht);
    if (isIconAction) {
        element.setAttribute('title', ADD_TO_MENU_LABEL);
        element.closest('.gericht').querySelector('.popover-body').querySelector('.wunschlist-button').innerHTML = ADD_TO_MENU_LABEL;
    } else {
        element.innerHTML = ADD_TO_MENU_LABEL;
    }
    element.setAttribute('data-stored', 0);

    if (gerichtPopoverIcon !== null) {
        gerichtPopoverIcon.setAttribute('title', ADD_TO_MENU_LABEL);
        gerichtPopoverIcon.setAttribute('data-stored', 0);
    }

    if (gerichtPopoverButton !== null) {
        gerichtPopoverButton.innerHTML = ADD_TO_MENU_LABEL;
        gerichtPopoverButton.setAttribute('data-stored', 0);
    }
}

/**
 *
 * @param name
 * @param day
 * @param type
 * @param isIconAction
 * @param element
 */
window.addGerichtToMenu = function (name, day, type, isIconAction, element) {
    let gericht = findGericht(name, type, day);
    let gerichtPopoverIcon = getGerichtPopoverIcon(day, type, name);
    let gerichtPopoverButton = getGerichtPopoverButton(day, type, name);

    if (gericht !== null) {
        gericht.day = day;
        gericht.type = type;
        addGerichtToLocalStorage(gericht);

        if (isIconAction) {
            element.setAttribute('title', REMOVE_FROM_MENU_LABEL);
            element.closest('.gericht').querySelector('.popover-body').querySelector('.wunschlist-button').innerHTML = REMOVE_FROM_MENU_LABEL;
        } else {
            element.innerHTML = REMOVE_FROM_MENU_LABEL;
        }
        element.setAttribute('data-stored', 1);
        if (gerichtPopoverIcon !== null) {
            gerichtPopoverIcon.setAttribute('title', REMOVE_FROM_MENU_LABEL);
            gerichtPopoverIcon.setAttribute('data-stored', 1);
        }
        if (gerichtPopoverButton !== null) {
            gerichtPopoverButton.innerHTML = REMOVE_FROM_MENU_LABEL;
            gerichtPopoverButton.setAttribute('data-stored', 1);
        }
    }
}

/**
 *
 */
window.attachEventListenerToAddButton = function () {
    let addButtons = document.querySelectorAll('.wunschlist-button');

    if (addButtons.length > 0) {
        addButtons.forEach(function (buttonElement, key) {
            buttonElement.addEventListener('click', function (event) {
                event.stopPropagation();
                eventHandlerForAddElements(event);

                return false;
            });
        });

        window.addButtonsEventAttached = true;
    }
};

/**
 *
 */
window.attachEventListenerToAddButtonByParent = function (parent) {
    let addButtons = parent.querySelectorAll('.wunschlist-button');

    if (addButtons.length > 0) {
        addButtons.forEach(function (buttonElement, key) {
            buttonElement.addEventListener('click', function (event) {
                event.stopPropagation();
                eventHandlerForAddElements(event);

                return false;
            });
        });
    }
};


/**
 *
 */
window.attachEventListenerToAddIcons = function () {
    let addButtons = document.querySelectorAll('.wunschlist-icon');

    if (addButtons.length > 0 && !window.addIconsEventAttached) {
        addButtons.forEach(function (buttonElement, key) {
            buttonElement.addEventListener('click', function (event) {
                event.stopPropagation()
                eventHandlerForAddElements(event);

                return false;
            });
        });

        window.addIconsEventAttached = true;
    }
};


/**
 *
 */
window.attachEventListenerToAddIconsByParent = function (parent) {
    let addButtons = parent.querySelectorAll('.wunschlist-icon');

    if (addButtons.length > 0) {
        addButtons.forEach(function (buttonElement, key) {
            buttonElement.addEventListener('click', function (event) {
                event.stopPropagation()
                eventHandlerForAddElements(event);

                return false;
            });
        });
    }
};

/**
 *
 * @param event
 */
window.eventHandlerForAddElements = function (event) {
    let type, day, name, isIconAction = false;
    let element = event.currentTarget;
    let isStored = element.getAttribute('data-stored');
    let parentModal = element.closest('.remodal-wrapper');

    if (parentModal === null) {
        let parentGericht = element.closest('.gericht');
        isIconAction = true;
        name = parentGericht.getAttribute('data-name');
        type = parentGericht.getAttribute('data-type');
        day = parentGericht.getAttribute('data-day');
    } else {
        name = parentModal.getAttribute('data-name');
        type = parentModal.getAttribute('data-type');
        day = parentModal.getAttribute('data-day');
    }


    //@TODO: check not only by day+name+type but by day+type
    if (isStored === '1') {
        removeGerichtFromMenu(name, day, type, isIconAction, element);
    } else {
        addGerichtToMenu(name, day, type, isIconAction, element);
    }
    toggleGerichteAfterSelection(day, type, name);
    toggleGerichtePrintVersionAfterSelection(day, type, name);
}


/**
 *
 * @param day
 * @param type
 * @param name
 */
window.toggleGerichteAfterSelection = function (day, type, name) {
    let parentTRWrapper = document.querySelector('.day-' + day);
    let gerichteColumn = null;
    let gerichte = [];

    if (parentTRWrapper !== null) {
        gerichteColumn = parentTRWrapper.querySelector('.' + type);

        if (gerichteColumn !== null) {
            gerichte = gerichteColumn.querySelectorAll('div.gericht:not([data-name="' + name + '"])');

            if (gerichte.length > 0) {
                for (let i = 0; i < gerichte.length; i++) {
                    if (gerichte[i].classList.contains('disabled')) {
                        gerichte[i].classList.remove('disabled');
                    } else {
                        gerichte[i].classList.add('disabled');
                        gerichte[i].classList.remove('active');
                    }
                }
            }

            let gerichtContain = gerichteColumn.querySelector('div.gericht[data-name="' + name + '"]');

            if (gerichtContain !== null) {
                if (gerichtContain.classList.contains('active')) {
                    gerichtContain.classList.remove('active');
                } else {
                    gerichtContain.classList.add('active');
                    gerichtContain.classList.remove('disabled');
                }
            }
        }
    }
};
/**
 *
 * @param day
 * @param type
 * @param name
 */
window.toggleGerichtePrintVersionAfterSelection = function (day, type, name) {
    let parentTRWrapper = document.querySelectorAll('.result-text.print .gericht[data-day="' + day + '"][data-type="' + type + '"]');
    if (parentTRWrapper.length > 0) {
        for (let i = 0; i < parentTRWrapper.length; i++) {
            if (parentTRWrapper.hasOwnProperty(i) && parentTRWrapper[i].getAttribute('data-name').indexOf(name) === -1) {
                if (parentTRWrapper[i].classList.contains('disabled')) {
                    parentTRWrapper[i].classList.remove('disabled');
                } else {
                    parentTRWrapper[i].classList.add('disabled');
                }
            }
        }
    }
};

/**
 *
 * @param day
 * @param type
 * @param name
 * @returns {null}
 */
window.getGerichtPopoverIcon = function (day, type, name) {
    let parentTRWrapper = document.querySelector('.day-' + day);
    let gerichteColumn = null;
    let gerichtePopover = null;
    let gerichtePopoverButton = null;

    if (parentTRWrapper !== null) {
        gerichteColumn = parentTRWrapper.querySelector('.' + type);

        if (gerichteColumn !== null) {
            try {
                gerichtePopover = gerichteColumn.querySelector('div.gericht[data-name="' + name + '"]');
            } catch (e) {
                alert('Leider dieses Gericht ist fehlgeschlagen (((');
            }

            if (gerichtePopover !== null) {
                gerichtePopoverButton = gerichtePopover.querySelector('.wunschlist-icon');
            }
        }
    }

    return gerichtePopoverButton;
};

/**
 *
 * @param day
 * @param type
 * @param name
 * @returns {null}
 */
window.getGerichtPopoverButton = function (day, type, name) {
    let parentTRWrapper = document.querySelector('.day-' + day);
    let gerichteColumn = null;
    let gerichtePopover = null;
    let gerichtePopoverButton = null;

    if (parentTRWrapper !== null) {
        gerichteColumn = parentTRWrapper.querySelector('.' + type);

        if (gerichteColumn !== null) {
            try {
                gerichtePopover = gerichteColumn.querySelector('div.gericht[data-name="' + name + '"]');
            } catch (e) {
                alert('Leider dieses Gericht ist fehlgeschlagen (((');
            }

            if (gerichtePopover !== null) {
                gerichtePopoverButton = gerichtePopover.querySelector('.wunschlist-button');
            }
        }
    }

    return gerichtePopoverButton;
};

/**
 *
 * @param event
 */
window.reloadGerichtEventHandler = function (event) {
    let day, type;
    let reloadIcon = event.currentTarget;
    let parentGerichtWrapper = reloadIcon.closest('.menu-item');

    if (parentGerichtWrapper !== null) {
        let gerichten = parentGerichtWrapper.querySelectorAll('.gericht');
        if (gerichten.length > 0) {
            for (let i = 0; i < gerichten.length; i++) {
                day = gerichten[i].getAttribute('data-day');
                type = gerichten[i].getAttribute('data-type');
                gerichten[i].remove();
            }
        }

        let menuObject = getMenuObjectByTagAndType(day, type);
        let menuObjectHtml = getGerictenByType(menuObject, day - 1, type);

        parentGerichtWrapper.innerHTML = menuObjectHtml[0].outerHTML + menuObjectHtml[1].outerHTML + menuObjectHtml[2].outerHTML;

        attachEventListenerToReloadGerichtIconByParent(parentGerichtWrapper);
        attachEventListenerToAddIconsByParent(parentGerichtWrapper);
        attachEventListenerToAddButtonByParent(parentGerichtWrapper);
    }
};


/**
 *
 */
window.attachEventListenerToReloadGerichtIcon = function () {
    let reloadIcons = document.querySelectorAll('.reload-gericht');

    if (reloadIcons.length > 0 && !window.reloadIconsEventAttached) {
        reloadIcons.forEach(function (reloadElement, key) {
            reloadElement.addEventListener('click', function (event) {
                event.stopPropagation()
                reloadGerichtEventHandler(event);
                return false;
            });
        });

        window.reloadIconsEventAttached = true;
    }
};

/**
 *
 */
window.attachEventListenerToReloadGerichtIconByParent = function (parent) {
    let reloadIcons = parent.querySelectorAll('.reload-gericht');

    if (reloadIcons.length > 0) {
        reloadIcons.forEach(function (reloadElement, key) {
            reloadElement.addEventListener('click', function (event) {
                event.stopPropagation()
                reloadGerichtEventHandler(event);
                return false;
            });
        });
    }
};
}
